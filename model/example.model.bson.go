// Code generated by https://github.com/chenxyzl/gen_tools; DO NOT EDIT.
// gg version: 0.0.1
// generate time: 2024-04-03 15:34:19
// src code version:
// src code commit time :
package model

import "go.mongodb.org/mongo-driver/bson"

import (
	"gen_tools/model/mdata"
)

func (s *TestA) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.id, "aaa": s.aaa, "bbb": s.bbb, "ccc": s.ccc}
	return bson.Marshal(doc)
}
func (s *TestA) UnmarshalBSON(data []byte) error {
	doc := struct {
		Id  uint64 `bson:"_id"`
		Aaa int64  `bson:"aaa"`
		Bbb int32  `bson:"bbb"`
		Ccc string `bson:"ccc"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetAaa(doc.Aaa)
	s.SetBbb(doc.Bbb)
	s.SetCcc(doc.Ccc)
	return nil
}
func (s *TestA) BuildDirty(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("_id", preKey), s.id)
	}
	if dirty&(1<<1) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("aaa", preKey), s.aaa)
	}
	if dirty&(1<<2) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("bbb", preKey), s.bbb)
	}
	if dirty&(1<<3) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("ccc", preKey), s.ccc)
	}
	s.CleanDirty(false)
	return
}
func (s *TestB) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.id, "aa": s.aa, "bb": s.bb, "cc": s.cc, "dd": s.dd}
	return bson.Marshal(doc)
}
func (s *TestB) UnmarshalBSON(data []byte) error {
	doc := struct {
		Id uint64                      `bson:"_id"`
		Aa string                      `bson:"aa"`
		Bb *TestA                      `bson:"bb"`
		Cc *mdata.MList[*TestA]        `bson:"cc"`
		Dd *mdata.MMap[string, *TestA] `bson:"dd"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetAa(doc.Aa)
	s.SetBb(doc.Bb)
	s.SetCc(doc.Cc)
	s.SetDd(doc.Dd)
	return nil
}
func (s *TestB) BuildDirty(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("_id", preKey), s.id)
	}
	if dirty&(1<<1) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("aa", preKey), s.aa)
	}
	if dirty&(1<<2) != 0 {
		if s.bb == nil {
			mdata.AddUnsetDirtyM(m, mdata.MakeBsonKey("bb", preKey))
		} else {
			s.bb.BuildDirty(m, mdata.MakeBsonKey("bb", preKey))
		}
	}
	if dirty&(1<<3) != 0 {
		if s.cc == nil {
			mdata.AddUnsetDirtyM(m, mdata.MakeBsonKey("cc", preKey))
		} else {
			s.cc.BuildDirty(m, mdata.MakeBsonKey("cc", preKey))
		}
	}
	if dirty&(1<<4) != 0 {
		if s.dd == nil {
			mdata.AddUnsetDirtyM(m, mdata.MakeBsonKey("dd", preKey))
		} else {
			s.dd.BuildDirty(m, mdata.MakeBsonKey("dd", preKey))
		}
	}
	s.CleanDirty(false)
	return
}
func (s *TestC) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.id, "a": s.a, "b": s.b, "c": s.c, "d": s.d}
	return bson.Marshal(doc)
}
func (s *TestC) UnmarshalBSON(data []byte) error {
	doc := struct {
		Id uint64                      `bson:"_id"`
		A  string                      `bson:"a"`
		B  *TestB                      `bson:"b"`
		C  *mdata.MList[*TestB]        `bson:"c"`
		D  *mdata.MMap[string, *TestB] `bson:"d"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetA(doc.A)
	s.SetB(doc.B)
	s.SetC(doc.C)
	s.SetD(doc.D)
	return nil
}
func (s *TestC) BuildDirty(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("_id", preKey), s.id)
	}
	if dirty&(1<<1) != 0 {
		mdata.AddSetDirtyM(m, mdata.MakeBsonKey("a", preKey), s.a)
	}
	if dirty&(1<<2) != 0 {
		if s.b == nil {
			mdata.AddUnsetDirtyM(m, mdata.MakeBsonKey("b", preKey))
		} else {
			s.b.BuildDirty(m, mdata.MakeBsonKey("b", preKey))
		}
	}
	if dirty&(1<<3) != 0 {
		if s.c == nil {
			mdata.AddUnsetDirtyM(m, mdata.MakeBsonKey("c", preKey))
		} else {
			s.c.BuildDirty(m, mdata.MakeBsonKey("c", preKey))
		}
	}
	if dirty&(1<<4) != 0 {
		if s.d == nil {
			mdata.AddUnsetDirtyM(m, mdata.MakeBsonKey("d", preKey))
		} else {
			s.d.BuildDirty(m, mdata.MakeBsonKey("d", preKey))
		}
	}
	s.CleanDirty(false)
	return
}
