// Code generated by gg; DO NOT EDIT.
// gg version: 0.0.1
// generate time: 2024-03-28 18:10:15
// src code version:
// src code commit time :
package model

import (
	"gen_tools/model/mdata"
)
import "go.mongodb.org/mongo-driver/bson"

func (s *TestA) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.id, "a": s.a, "b": s.b}
	return bson.Marshal(doc)
}
func (s *TestA) UnmarshalBSON(data []byte) error {
	doc := struct {
		Id uint64 `bson:"_id"`
		A  int64  `bson:"a"`
		B  int32  `bson:"b"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetA(doc.A)
	s.SetB(doc.B)
	return nil
}
func (s *TestB) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.id, "m": s.m, "n": s.n, "c": s.c, "d": s.d}
	return bson.Marshal(doc)
}
func (s *TestB) UnmarshalBSON(data []byte) error {
	doc := struct {
		Id uint64                      `bson:"_id"`
		M  string                      `bson:"m"`
		N  *TestA                      `bson:"n"`
		C  *mdata.MList[*TestA]        `bson:"c"`
		D  *mdata.MMap[string, *TestA] `bson:"d"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetM(doc.M)
	s.SetN(doc.N)
	s.SetC(doc.C)
	s.SetD(doc.D)
	return nil
}
func (s *TestC) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.id, "x": s.x, "y": s.y}
	return bson.Marshal(doc)
}
func (s *TestC) UnmarshalBSON(data []byte) error {
	doc := struct {
		Id uint64 `bson:"_id"`
		X  string `bson:"x"`
		Y  *TestB `bson:"y"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetX(doc.X)
	s.SetY(doc.Y)
	return nil
}
