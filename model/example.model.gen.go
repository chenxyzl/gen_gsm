// Code generated by gg; DO NOT EDIT.
// gg version: 0.0.1
// generate time: 2024-03-28 17:46:18
// src code version:
// src code commit time :
package model

import "gen_tools/model/mdata"
import "fmt"
import "encoding/json"

func (s *TestA) GetId() uint64 {
	return s.id
}
func (s *TestA) SetId(v uint64) {
	s.id = v
	s.UpdateDirty(0)
}
func (s *TestA) GetA() int64 {
	return s.a
}
func (s *TestA) SetA(v int64) {
	s.a = v
	s.UpdateDirty(1)
}
func (s *TestA) GetB() int32 {
	return s.b
}
func (s *TestA) SetB(v int32) {
	s.b = v
	s.UpdateDirty(2)
}
func (s *TestA) String() string {
	doc := struct {
		Id uint64 `bson:"_id"`
		A  int64  `bson:"a"`
		B  int32  `bson:"b"`
	}{s.id, s.a, s.b}
	return fmt.Sprintf("%v", &doc)
}
func (s *TestA) MarshalJSON() ([]byte, error) {
	doc := struct {
		Id uint64 `bson:"_id"`
		A  int64  `bson:"a"`
		B  int32  `bson:"b"`
	}{s.id, s.a, s.b}
	return json.Marshal(doc)
}
func (s *TestA) UnmarshalJSON(data []byte) error {
	doc := struct {
		Id uint64 `bson:"_id"`
		A  int64  `bson:"a"`
		B  int32  `bson:"b"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetA(doc.A)
	s.SetB(doc.B)
	return nil
}
func (s *TestA) CleanDirty() {
	s.DirtyModel.CleanDirty()
}
func (s *TestB) GetId() uint64 {
	return s.id
}
func (s *TestB) SetId(v uint64) {
	s.id = v
	s.UpdateDirty(0)
}
func (s *TestB) GetM() string {
	return s.m
}
func (s *TestB) SetM(v string) {
	s.m = v
	s.UpdateDirty(1)
}
func (s *TestB) GetN() *TestA {
	return s.n
}
func (s *TestB) SetN(v *TestA) {
	if v != nil {
		v.SetParent(2, s.UpdateDirty)
	}
	s.n = v
	s.UpdateDirty(2)
}
func (s *TestB) GetC() *mdata.MList[*TestA] {
	return s.c
}
func (s *TestB) SetC(v *mdata.MList[*TestA]) {
	if v != nil {
		v.SetParent(3, s.UpdateDirty)
	}
	s.c = v
	s.UpdateDirty(3)
}
func (s *TestB) GetD() *mdata.MMap[string, *TestA] {
	return s.d
}
func (s *TestB) SetD(v *mdata.MMap[string, *TestA]) {
	if v != nil {
		v.SetParent(4, s.UpdateDirty)
	}
	s.d = v
	s.UpdateDirty(4)
}
func (s *TestB) String() string {
	doc := struct {
		Id uint64                      `bson:"_id"`
		M  string                      `bson:"m"`
		N  *TestA                      `bson:"n"`
		C  *mdata.MList[*TestA]        `bson:"c"`
		D  *mdata.MMap[string, *TestA] `bson:"d"`
	}{s.id, s.m, s.n, s.c, s.d}
	return fmt.Sprintf("%v", &doc)
}
func (s *TestB) MarshalJSON() ([]byte, error) {
	doc := struct {
		Id uint64                      `bson:"_id"`
		M  string                      `bson:"m"`
		N  *TestA                      `bson:"n"`
		C  *mdata.MList[*TestA]        `bson:"c"`
		D  *mdata.MMap[string, *TestA] `bson:"d"`
	}{s.id, s.m, s.n, s.c, s.d}
	return json.Marshal(doc)
}
func (s *TestB) UnmarshalJSON(data []byte) error {
	doc := struct {
		Id uint64                      `bson:"_id"`
		M  string                      `bson:"m"`
		N  *TestA                      `bson:"n"`
		C  *mdata.MList[*TestA]        `bson:"c"`
		D  *mdata.MMap[string, *TestA] `bson:"d"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetM(doc.M)
	s.SetN(doc.N)
	s.SetC(doc.C)
	s.SetD(doc.D)
	return nil
}
func (s *TestB) CleanDirty() {
	s.DirtyModel.CleanDirty()
}
func (s *TestC) GetId() uint64 {
	return s.id
}
func (s *TestC) SetId(v uint64) {
	s.id = v
	s.UpdateDirty(0)
}
func (s *TestC) GetX() string {
	return s.x
}
func (s *TestC) SetX(v string) {
	s.x = v
	s.UpdateDirty(1)
}
func (s *TestC) GetY() *TestB {
	return s.y
}
func (s *TestC) SetY(v *TestB) {
	if v != nil {
		v.SetParent(2, s.UpdateDirty)
	}
	s.y = v
	s.UpdateDirty(2)
}
func (s *TestC) String() string {
	doc := struct {
		Id uint64 `bson:"_id"`
		X  string `bson:"x"`
		Y  *TestB `bson:"y"`
	}{s.id, s.x, s.y}
	return fmt.Sprintf("%v", &doc)
}
func (s *TestC) MarshalJSON() ([]byte, error) {
	doc := struct {
		Id uint64 `bson:"_id"`
		X  string `bson:"x"`
		Y  *TestB `bson:"y"`
	}{s.id, s.x, s.y}
	return json.Marshal(doc)
}
func (s *TestC) UnmarshalJSON(data []byte) error {
	doc := struct {
		Id uint64 `bson:"_id"`
		X  string `bson:"x"`
		Y  *TestB `bson:"y"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetId(doc.Id)
	s.SetX(doc.X)
	s.SetY(doc.Y)
	return nil
}
func (s *TestC) CleanDirty() {
	s.DirtyModel.CleanDirty()
}
